import numpy as np
import sys

'''def main(paths, clipgroups):
  for path_id, path_matrix, path_d in paths:
    for clipgroup in clipgroups:
      proj_matrix, plane1, plane2, plane3 = transform_clipgroup(path_matrix, clipgroup)
      res = [path_clip( path_clip(path_clip(path_d, plane1), plane2), plane3)]
      if len(res) > 0:
        ?

def genpathsfromstdin():
  

main(sys.stdin, uvfile)gs


for l in sys.stdin:
  a,b = l.split(" ")
  print(a + b)
'''

#seg = [s1, s0]
#clip_plane = [[N], R0N]
def seg_clip(isfirst, op, s0, s1, n, r0n):
  s0n = np.dot(s0,n)
  if isfirst and s0n > 0:
    yield "M", s0
  den = np.dot((s1 - s0),n)
  if den != 0:
    t = (r0n - s0n)/den
    if t >0 and t < 1:
      yield "L", (t*s1 + (1-t)*s0)
  if op == 'Z':
    yield 'Z', 0
  else:
    if np.dot(s1,n) > r0n:
      yield op, s1
  
def is_on_visible_side(point, plane):
  return np.dot(plane[0], point)

class path_clipper:
  def __init__(self, plane, outfunc):
    self.M([0,0])
    self.plane = plane
    self.outfunc = outfunc

  def M(self, args):
    self.isfirst = True
    self.currpoint = np.array(args)
    self.firstpoint = self.currpoint

  def m(self, args):
    self.M(self.currpoint + np.array(args))

  def L(self, args):
    if self.isfirst and is_on_visible_side():
      self.outfunc("M {} {} ".format( self.currpoint[0], self.currpoint[1]) )
    self.outfunc("L {} {} ".format(args[0], args[1]) )

  def l(self, args):
    self.L(self.currpoint + np.array(args))

  def z(self, args):
    if not self.isfirst:
      outfile.write("z")
    
  def Z(self, args):
    self.z(args)

  def out_connectpoint():
    
  #vec_poly eh um poly de vetores, representando a funcao parametrica de t (uma matrix 2 x n)
  def intersect_poly(self, vec_poly):
    parampoly = self.plane[0]*vec_poly
    roots = np.roots(parampoly)
    

PATH_COMMAND = {
'm' : {"next":"l", "nargs":2},
'M' : {"next":"L", "nargs":2},
'l' : {"next":"l", "nargs":2},
'L' : {"next":"L", "nargs":2},
'z' : {"next":"m", "nargs":0},
'Z' : {"next":"M", "nargs":0}
}

def parse_d(d, sink):
  args = []
  nargs = 2
  currcommand = 'M'
  for tkn in d.split(" "):
    try:
      arg = float(tkn)
      args.append(arg)
      nargs = nargs - 1
    except ValueError:
      currcommand = tkn
      nargs = PATH_COMMAND[tkn]['nargs']
    if nargs == 0:
      getattr(sink, currcommand)(args)
      args = []
      currcommand = PATH_COMMAND[currcommand]['next']      
      nargs = PATH_COMMAND[currcommand]['nargs']
  
d = "m 0 0.5 L 1 0 z"
plane = [[1,-1], 0]

parse_d(d, path_clipper(plane, sys.stdout.write))
print()
#main

#argumento tem arquivo com as retas


#for l in sys.stdin:
#  path_id, path_d, path_matrix = parse_path(l)



